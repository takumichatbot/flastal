// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- Enums ---

enum ProjectStatus {
  PENDING_APPROVAL // 審査中
  FUNDRAISING      // 募集中
  SUCCESSFUL       // 達成
  COMPLETED        // 完了
  CANCELED         // 中止
  REJECTED         // 却下
}

enum OfferStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum FloristStatus {
  PENDING   // 審査待ち
  APPROVED  // 承認済み
  REJECTED  // 拒否
}

enum MessageSenderType {
  USER
  FLORIST
}

enum ProjectVisibility {
  PUBLIC
  UNLISTED
}

// --- Models ---

model User {
  id                   String             @id @default(cuid())
  email                String             @unique
  handleName           String
  password             String
  points               Int                @default(0)
  referralCode         String             @unique @default(cuid())
  referredById         String?
  hasMadeFirstPurchase Boolean            @default(false)
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt

  // Relations
  referrer             User?              @relation("Referrals", fields: [referredById], references: [id])
  referredUsers        User[]             @relation("Referrals")
  createdProjects      Project[]          @relation("PlannerProjects")
  pledges              Pledge[]
  reviews              Review[]
  messages             Message[]
  groupChatMessages    GroupChatMessage[]
  pollVotes            PollVote[]
  reports              ProjectReport[]    @relation("UserReports")
  sentChatMessages     ChatMessage[]      @relation("UserChatMessages")
}

model Project {
  id                String            @id @default(cuid())
  title             String
  description       String            @db.Text
  targetAmount      Int
  collectedAmount   Int               @default(0)
  deliveryAddress   String
  deliveryDateTime  DateTime
  imageUrl          String?
  designDetails     String?           @db.Text
  size              String?
  flowerTypes       String?
  // ↓↓↓ この行を一時的にコメントアウトします ↓↓↓
  status            ProjectStatus     @default(PENDING_APPROVAL)
  visibility        ProjectVisibility @default(PUBLIC)
  completionImageUrls String[]
  completionComment String?           @db.Text
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  finalBalance            Int?    // 企画完了時の最終残高（余剰金）
  surplusUsageDescription String? @db.Text // 余剰金の使い道のメモ

  // Relations
  plannerId           String
  planner             User              @relation("PlannerProjects", fields: [plannerId], references: [id])
  pledges             Pledge[]
  offer               Offer?
  review              Review?
  announcements       Announcement[]
  expenses            Expense[]
  commission          Commission?
  quotation           Quotation?
  messages            Message[]
  tasks               Task[]
  groupChatMessages   GroupChatMessage[]
  activePoll          ActivePoll?
  reports             ProjectReport[]
}

model Pledge {
  id        String   @id @default(cuid())
  amount    Int
  comment   String?
  createdAt DateTime @default(now())

  // Relations
  projectId String
  project   Project  @relation(fields: [projectId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}

model Florist {
  id            String          @id @default(cuid())
  email         String          @unique
  password      String
  contactName   String
  address       String?
  phoneNumber   String?
  website       String?
  portfolio     String?         @db.Text
  balance       Int             @default(0)
  laruBotApiKey String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  shopName      String          // 実店舗名（運営確認用）
  platformName  String          @unique // プラットフォーム上の活動名（公開用）
  status        FloristStatus   @default(PENDING) // 審査ステータス


  // Relations
  offers           Offer[]
  reviews          Review[]
  payoutRequests   PayoutRequest[]
  sentChatMessages ChatMessage[]   @relation("FloristChatMessages")
}

model Offer {
  id        String      @id @default(cuid())
  status    OfferStatus @default(PENDING)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  // Relations
  projectId String    @unique
  project   Project   @relation(fields: [projectId], references: [id])
  floristId String
  florist   Florist   @relation(fields: [floristId], references: [id])
  chatRoom  ChatRoom?
}

model ChatRoom {
  id        String        @id @default(cuid())
  createdAt DateTime      @default(now())

  // Relations
  offerId  String        @unique
  offer    Offer         @relation(fields: [offerId], references: [id])
  messages ChatMessage[]
}

model ChatMessage {
  id             String            @id @default(cuid())
  content        String            @db.Text
  senderType     MessageSenderType
  isAutoResponse Boolean           @default(false)
  createdAt      DateTime          @default(now())

  // Relations
  chatRoomId String
  chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id])
  userId     String?
  user       User?    @relation("UserChatMessages", fields: [userId], references: [id])
  floristId  String?
  florist    Florist? @relation("FloristChatMessages", fields: [floristId], references: [id])
}

model Venue {
  id          String    @id @default(cuid())
  email       String    @unique
  password    String
  venueName   String
  address     String?
  regulations String?   @db.Text
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Review {
  id        String   @id @default(cuid())
  rating    Int
  comment   String?  @db.Text
  createdAt DateTime @default(now())

  // Relations
  projectId String  @unique
  project   Project @relation(fields: [projectId], references: [id])
  floristId String
  florist   Florist @relation(fields: [floristId], references: [id])
  userId    String
  user      User    @relation(fields: [userId], references: [id])
}

model Commission {
  id        String   @id @default(cuid())
  amount    Int
  createdAt DateTime @default(now())

  // Relations
  projectId String  @unique
  project   Project @relation(fields: [projectId], references: [id])
}

model Announcement {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  createdAt DateTime @default(now())

  // Relations
  projectId String
  project   Project  @relation(fields: [projectId], references: [id])
}

model PayoutRequest {
  id          String   @id @default(cuid())
  amount      Int
  accountInfo String   @db.Text
  status      String   @default("PENDING")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  floristId String
  florist   Florist  @relation(fields: [floristId], references: [id])
}

model Expense {
  id        String   @id @default(cuid())
  itemName  String
  amount    Int
  createdAt DateTime @default(now())

  // Relations
  projectId String
  project   Project  @relation(fields: [projectId], references: [id])
}

model Quotation {
  id          String          @id @default(cuid())
  totalAmount Int
  isApproved  Boolean         @default(false)
  createdAt   DateTime        @default(now())

  // Relations
  projectId String          @unique
  project   Project         @relation(fields: [projectId], references: [id])
  items     QuotationItem[]
}

model QuotationItem {
  id          String    @id @default(cuid())
  itemName    String
  amount      Int

  // Relations
  quotationId String
  quotation   Quotation @relation(fields: [quotationId], references: [id])
}

model Task {
  id          String    @id @default(cuid())
  title       String
  isCompleted Boolean   @default(false)
  dueDate     DateTime?
  createdAt   DateTime  @default(now())

  // Relations
  projectId String
  project   Project   @relation(fields: [projectId], references: [id])
}

model Message {
  id        String   @id @default(cuid())
  content   String   @db.Text
  cardName  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  projectId String
  project   Project  @relation(fields: [projectId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])

  @@unique([projectId, userId])
}

model GroupChatMessage {
  id         String   @id @default(cuid())
  templateId String?
  content    String?
  createdAt  DateTime @default(now())

  // Relations
  projectId String
  project   Project  @relation(fields: [projectId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}

model ActivePoll {
  id        String     @id @default(cuid())
  question  String
  options   String[]
  createdAt DateTime   @default(now())

  // Relations
  projectId String     @unique
  project   Project    @relation(fields: [projectId], references: [id])
  votes     PollVote[]
}

model PollVote {
  id          String     @id @default(cuid())
  optionIndex Int

  // Relations
  pollId String
  poll   ActivePoll @relation(fields: [pollId], references: [id])
  userId String
  user   User       @relation(fields: [userId], references: [id])

  @@unique([pollId, userId])
}

model ProjectReport {
  id         String   @id @default(cuid())
  reason     String
  details    String?  @db.Text
  status     String   @default("SUBMITTED")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  projectId  String
  project    Project  @relation(fields: [projectId], references: [id])
  reporterId String
  reporter   User     @relation("UserReports", fields: [reporterId], references: [id])

  @@unique([projectId, reporterId])
}