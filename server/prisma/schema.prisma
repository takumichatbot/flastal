// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

enum ProjectStatus {
  FUNDRAISING
  SUCCESSFUL
  FAILED
  COMPLETED
}

enum OfferStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum MessageSenderType {
  USER
  FLORIST
}

enum PayoutStatus {
  PENDING
  COMPLETED
  REJECTED
}

enum ProjectVisibility {
  PUBLIC
  UNLISTED
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String    @id @default(cuid())
  email                String    @unique
  handleName           String
  password             String
  points               Int       @default(0)
  referralCode         String    @unique @default(cuid())
  referredById         String?
  hasMadeFirstPurchase Boolean   @default(false)
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  pollVotes            PollVote[]
  projects             Project[]
  pledges              Pledge[]
  reviews              Review[]
  messages      Message[] 
  groupChatMessages GroupChatMessage[] 
  reports           ProjectReport[]
}

model Project {
  id                 String            @id @default(cuid())
  title              String
  description        String            @db.Text
  status            String    @default("FUNDRAISING") 
  targetAmount       Int
  reports           ProjectReport[] 
  imageUrl           String?
  deliveryAddress    String
  deliveryDateTime   DateTime
  designDetails      String?           @db.Text
  size               String?
  flowerTypes        String?
  status             ProjectStatus     @default(FUNDRAISING)
  collectedAmount    Int               @default(0)
  visibility         ProjectVisibility @default(PUBLIC)
  activePoll    ActivePoll? 
  plannerId          String
  planner            User              @relation(fields: [plannerId], references: [id])
  tasks         Task[]  
  pledges            Pledge[]
  offer              Offer?
  review             Review?
  announcements      Announcement[]
  expenses           Expense[]
  commission         Commission?
  quotation          Quotation?
  messages      Message[]
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  groupChatMessages GroupChatMessage[] 
  isVisible         Boolean   @default(true)
  completionImageUrls String[]  // ★ この行を追記
  completionComment String?   @db.Text // ★ この行を追記
}

model Pledge {
  id        String   @id @default(cuid())
  amount    Int
  comment   String?
  projectId String
  project   Project  @relation(fields: [projectId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

model Florist {
  id             String          @id @default(cuid())
  email          String          @unique
  password       String
  shopName       String
  contactName    String
  address        String?
  phoneNumber    String?
  website        String?
  portfolio      String?         @db.Text
  balance        Int             @default(0)
  laruBotApiKey  String?

  offers         Offer[]
  reviews        Review[]
  payoutRequests PayoutRequest[]

  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model Offer {
  id        String      @id @default(cuid())
  status    OfferStatus @default(PENDING)

  projectId String      @unique
  project   Project     @relation(fields: [projectId], references: [id])
  floristId String
  florist   Florist     @relation(fields: [floristId], references: [id])

  chatRoom  ChatRoom?

  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model ChatRoom {
  id        String        @id @default(cuid())
  offerId   String        @unique
  offer     Offer         @relation(fields: [offerId], references: [id])
  messages  ChatMessage[]
  createdAt DateTime      @default(now())
}

model ChatMessage {
  id             String            @id @default(cuid())
  content        String            @db.Text
  senderType     MessageSenderType
  isAutoResponse Boolean           @default(false)
  userId         String?
  floristId      String?
  chatRoomId     String
  chatRoom       ChatRoom          @relation(fields: [chatRoomId], references: [id])
  createdAt      DateTime          @default(now())
}

model Venue {
  id          String    @id @default(cuid())
  email       String    @unique
  password    String
  venueName   String
  address     String?
  regulations String?   @db.Text
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Review {
  id        String   @id @default(cuid())
  rating    Int
  comment   String?  @db.Text

  projectId String   @unique
  project   Project  @relation(fields: [projectId], references: [id])
  floristId String
  florist   Florist  @relation(fields: [floristId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
}

model Commission {
  id        String   @id @default(cuid())
  amount    Int
  projectId String   @unique
  project   Project  @relation(fields: [projectId], references: [id])
  createdAt DateTime @default(now())
}

model Announcement {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  projectId String
  project   Project  @relation(fields: [projectId], references: [id])
  createdAt DateTime @default(now())
}

model PayoutRequest {
  id          String   @id @default(cuid())
  amount      Int
  accountInfo String   @db.Text
  status      String   @default("PENDING") // ★ この行を追記 (PENDING | COMPLETED)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // --- Relations ---
  florist     Florist @relation(fields: [floristId], references: [id])
  floristId   String
}

model Expense {
  id        String   @id @default(cuid())
  itemName  String
  amount    Int
  projectId String
  project   Project  @relation(fields: [projectId], references: [id])
  createdAt DateTime @default(now())
}

model Quotation {
  id          String          @id @default(cuid())
  totalAmount Int
  isApproved  Boolean         @default(false)

  projectId   String          @unique
  project     Project         @relation(fields: [projectId], references: [id])
  items       QuotationItem[]

  createdAt   DateTime        @default(now())
}

model QuotationItem {
  id          String    @id @default(cuid())
  itemName    String
  amount      Int

  quotationId String
  quotation   Quotation @relation(fields: [quotationId], references: [id])
}

model Task {
  id          String   @id @default(cuid())
  title       String   // タスクの内容
  isCompleted Boolean  @default(false) // 完了したかどうか
  dueDate     DateTime? // 締め切り日 (任意)

  // 関連付け
  projectId String
  project   Project  @relation(fields: [projectId], references: [id])

  createdAt DateTime @default(now())
}

model Message {
  id        String   @id @default(cuid())
  content   String   @db.Text // メッセージ本文 (長文もOK)
  cardName  String   // カードに印刷する名前
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // --- Relations ---
  project   Project @relation(fields: [projectId], references: [id])
  projectId String
  user      User    @relation(fields: [userId], references: [id])
  userId    String

  // 1ユーザーは1企画に1メッセージまで
  @@unique([projectId, userId])
}

model GroupChatMessage {
  id         String   @id @default(cuid())
  templateId String?    // 選択されたテンプレートのID
  content    String? 
  createdAt  DateTime @default(now())

  // --- Relations ---
  project    Project @relation(fields: [projectId], references: [id])
  projectId  String
  user       User    @relation(fields: [userId], references: [id])
  userId     String
}

// 企画ごとに1つだけ存在するアクティブなアンケート
model ActivePoll {
  id        String   @id @default(cuid())
  question  String
  options   String[] // 選択肢を文字列の配列として保持
  createdAt DateTime @default(now())

  // --- Relations ---
  project   Project    @relation(fields: [projectId], references: [id])
  projectId String     @unique // 1企画に1アンケート
  votes     PollVote[]
}

// 新しいアンケートへの投票
model PollVote {
  id        String @id @default(cuid())
  optionIndex Int    // ユーザーが選んだ選択肢の番号 (0, 1, 2...)

  // --- Relations ---
  poll      ActivePoll @relation(fields: [pollId], references: [id])
  pollId    String
  user      User       @relation(fields: [userId], references: [id])
  userId    String

  // 1ユーザーは1アンケートに1回だけ投票可能
  @@unique([pollId, userId])
}

model ProjectReport {
  id        String   @id @default(cuid())
  reason    String   // 通報理由 (例: SPAM, INAPPROPRIATE, SCAM)
  details   String?  @db.Text // 詳細な説明 (任意)
  status    String   @default("SUBMITTED") // (SUBMITTED | REVIEWED)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // --- Relations ---
  project   Project @relation(fields: [projectId], references: [id])
  projectId String
  reporter  User    @relation(fields: [reporterId], references: [id])
  reporterId String

  // 1ユーザーは1企画に1回だけ通報可能
  @@unique([projectId, reporterId])
}