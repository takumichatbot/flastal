
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  handleName: 'handleName',
  password: 'password',
  points: 'points',
  role: 'role',
  referralCode: 'referralCode',
  referredById: 'referredById',
  hasMadeFirstPurchase: 'hasMadeFirstPurchase',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProjectScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  targetAmount: 'targetAmount',
  collectedAmount: 'collectedAmount',
  deliveryAddress: 'deliveryAddress',
  deliveryDateTime: 'deliveryDateTime',
  imageUrl: 'imageUrl',
  designDetails: 'designDetails',
  size: 'size',
  flowerTypes: 'flowerTypes',
  status: 'status',
  visibility: 'visibility',
  completionImageUrls: 'completionImageUrls',
  completionComment: 'completionComment',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  finalBalance: 'finalBalance',
  surplusUsageDescription: 'surplusUsageDescription',
  portfolioImages: 'portfolioImages',
  businessHours: 'businessHours',
  plannerId: 'plannerId'
};

exports.Prisma.PledgeScalarFieldEnum = {
  id: 'id',
  amount: 'amount',
  comment: 'comment',
  createdAt: 'createdAt',
  projectId: 'projectId',
  userId: 'userId'
};

exports.Prisma.FloristScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  contactName: 'contactName',
  address: 'address',
  phoneNumber: 'phoneNumber',
  website: 'website',
  portfolio: 'portfolio',
  balance: 'balance',
  laruBotApiKey: 'laruBotApiKey',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  shopName: 'shopName',
  platformName: 'platformName',
  status: 'status'
};

exports.Prisma.OfferScalarFieldEnum = {
  id: 'id',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  projectId: 'projectId',
  floristId: 'floristId'
};

exports.Prisma.ChatRoomScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  offerId: 'offerId'
};

exports.Prisma.ChatMessageScalarFieldEnum = {
  id: 'id',
  content: 'content',
  senderType: 'senderType',
  isAutoResponse: 'isAutoResponse',
  createdAt: 'createdAt',
  chatRoomId: 'chatRoomId',
  userId: 'userId',
  floristId: 'floristId'
};

exports.Prisma.VenueScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  venueName: 'venueName',
  address: 'address',
  regulations: 'regulations',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ReviewScalarFieldEnum = {
  id: 'id',
  rating: 'rating',
  comment: 'comment',
  createdAt: 'createdAt',
  projectId: 'projectId',
  floristId: 'floristId',
  userId: 'userId'
};

exports.Prisma.CommissionScalarFieldEnum = {
  id: 'id',
  amount: 'amount',
  createdAt: 'createdAt',
  projectId: 'projectId'
};

exports.Prisma.AnnouncementScalarFieldEnum = {
  id: 'id',
  title: 'title',
  content: 'content',
  createdAt: 'createdAt',
  projectId: 'projectId'
};

exports.Prisma.PayoutRequestScalarFieldEnum = {
  id: 'id',
  amount: 'amount',
  accountInfo: 'accountInfo',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  floristId: 'floristId'
};

exports.Prisma.ExpenseScalarFieldEnum = {
  id: 'id',
  itemName: 'itemName',
  amount: 'amount',
  createdAt: 'createdAt',
  projectId: 'projectId'
};

exports.Prisma.QuotationScalarFieldEnum = {
  id: 'id',
  totalAmount: 'totalAmount',
  isApproved: 'isApproved',
  createdAt: 'createdAt',
  projectId: 'projectId'
};

exports.Prisma.QuotationItemScalarFieldEnum = {
  id: 'id',
  itemName: 'itemName',
  amount: 'amount',
  quotationId: 'quotationId'
};

exports.Prisma.TaskScalarFieldEnum = {
  id: 'id',
  title: 'title',
  isCompleted: 'isCompleted',
  dueDate: 'dueDate',
  createdAt: 'createdAt',
  projectId: 'projectId'
};

exports.Prisma.MessageScalarFieldEnum = {
  id: 'id',
  content: 'content',
  cardName: 'cardName',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  projectId: 'projectId',
  userId: 'userId'
};

exports.Prisma.GroupChatMessageScalarFieldEnum = {
  id: 'id',
  templateId: 'templateId',
  content: 'content',
  createdAt: 'createdAt',
  projectId: 'projectId',
  userId: 'userId'
};

exports.Prisma.ActivePollScalarFieldEnum = {
  id: 'id',
  question: 'question',
  options: 'options',
  createdAt: 'createdAt',
  projectId: 'projectId'
};

exports.Prisma.PollVoteScalarFieldEnum = {
  id: 'id',
  optionIndex: 'optionIndex',
  pollId: 'pollId',
  userId: 'userId'
};

exports.Prisma.ProjectReportScalarFieldEnum = {
  id: 'id',
  reason: 'reason',
  details: 'details',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  projectId: 'projectId',
  reporterId: 'reporterId'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.UserRole = exports.$Enums.UserRole = {
  USER: 'USER',
  ADMIN: 'ADMIN'
};

exports.ProjectStatus = exports.$Enums.ProjectStatus = {
  PENDING_APPROVAL: 'PENDING_APPROVAL',
  FUNDRAISING: 'FUNDRAISING',
  SUCCESSFUL: 'SUCCESSFUL',
  COMPLETED: 'COMPLETED',
  CANCELED: 'CANCELED',
  REJECTED: 'REJECTED'
};

exports.ProjectVisibility = exports.$Enums.ProjectVisibility = {
  PUBLIC: 'PUBLIC',
  UNLISTED: 'UNLISTED'
};

exports.FloristStatus = exports.$Enums.FloristStatus = {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED'
};

exports.OfferStatus = exports.$Enums.OfferStatus = {
  PENDING: 'PENDING',
  ACCEPTED: 'ACCEPTED',
  REJECTED: 'REJECTED'
};

exports.MessageSenderType = exports.$Enums.MessageSenderType = {
  USER: 'USER',
  FLORIST: 'FLORIST'
};

exports.Prisma.ModelName = {
  User: 'User',
  Project: 'Project',
  Pledge: 'Pledge',
  Florist: 'Florist',
  Offer: 'Offer',
  ChatRoom: 'ChatRoom',
  ChatMessage: 'ChatMessage',
  Venue: 'Venue',
  Review: 'Review',
  Commission: 'Commission',
  Announcement: 'Announcement',
  PayoutRequest: 'PayoutRequest',
  Expense: 'Expense',
  Quotation: 'Quotation',
  QuotationItem: 'QuotationItem',
  Task: 'Task',
  Message: 'Message',
  GroupChatMessage: 'GroupChatMessage',
  ActivePoll: 'ActivePoll',
  PollVote: 'PollVote',
  ProjectReport: 'ProjectReport'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
